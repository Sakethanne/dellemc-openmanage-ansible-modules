# Dell OpenManage Ansible modules
# Copyright (C) 2024 Dell Inc. or its subsidiaries. All Rights Reserved.

# GNU General Public License v3.0+ (see COPYING or
# https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Test that we have an iDRAC host, iDRAC username and iDRAC password
  ansible.builtin.fail:
    msg: 'Please define the following variables: idrac_ip, idrac_user and
     idrac_password.'
  when: 'idrac_ip is not defined or idrac_user is not defined or idrac_password
   is not defined'

- block:
    - name: Create Directory
      ansible.builtin.file:
        path: "{{ base_path_for_import_certificate }}"
        state: directory
      register: created_directory

    - name: Get custom certificate without passphrase from share
      ansible.builtin.uri:
        url: "https://{{ https_share_ip }}{{
          https_certificate_path }}{{ custom_certificate_without_passphrase }}"
        dest: "{{ base_path_for_import_certificate }}"
        force_basic_auth: true
        validate_certs: false
        url_username: "{{ https_share_username }}"
        url_password: "{{ https_share_password }}"

    - name: Get custom certificate with passphrase from share
      ansible.builtin.uri:
        url: "https://{{ https_share_ip }}{{ https_certificate_path }}{{
          custom_certificate }}"
        dest: "{{ base_path_for_import_certificate }}"
        force_basic_auth: true
        validate_certs: false
        url_username: "{{ https_share_username }}"
        url_password: "{{ https_share_password }}"

    - name: Get CSC certificate from share
      ansible.builtin.uri:
        url: "https://{{ https_share_ip }}{{ https_certificate_path }}{{
          CSC_passphrase_certificate }}"
        dest: "{{ base_path_for_import_certificate }}"
        force_basic_auth: true
        validate_certs: false
        url_username: "{{ https_share_username }}"
        url_password: "{{ https_share_password }}"

    - name: Negative - unreachable host
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "reset"
        certificate_type: "HTTPS"
        idrac_ip: "999.999.999.999"
      register: invalid_unreachable
      ignore_errors: true
      ignore_unreachable: true

    - name: Verify task status - Negative - invalid unreachable host
      ansible.builtin.assert:
        that:
          - invalid_unreachable.unreachable
          - 'invalid_unreachable.msg ==  "<urlopen error Unable to communicate
              with iDRAC 999.999.999.999. This may be due to one of the
              following: Incorrect username or password, unreachable iDRAC
              IP or a failure in TLS/SSL handshake.>" or
              invalid_unreachable.msg == "<urlopen error [Errno -2] Name or
              service not known>"'

    - name: Negative - invalid idrac user
      dellemc.openmanage.idrac_certificates:
        idrac_user: invalid
        validate_certs: false
        command: "reset"
        certificate_type: "HTTPS"
      register: invalid_idrac_user
      ignore_errors: true

    - name: Verify task status - Negative - invalid idrac user
      ansible.builtin.assert:
        that:
          - invalid_idrac_user.failed
          - 'invalid_idrac_user.msg ==  "<urlopen error
              Unable to communicate with iDRAC {{ idrac_ip }}. This may be due
              to one of the following: Incorrect username or password,
              unreachable iDRAC IP or a failure in TLS/SSL
              handshake." or "HTTP Error 401: Unauthorized"'

    - name: Negative - invalid idrac password
      dellemc.openmanage.idrac_certificates:
        idrac_password: invalid
        validate_certs: false
        command: "reset"
        certificate_type: "HTTPS"
      register: invalid_idrac_pass
      ignore_errors: true

    - name: Verify task status - Negative - invalid idrac password
      ansible.builtin.assert:
        that:
          - invalid_idrac_pass.failed
          - 'invalid_idrac_pass.msg == "<urlopen error Unable to communicate
            with iDRAC {{ idrac_ip }}. This may be due to one of the
            following: Incorrect username or password, unreachable iDRAC
            IP or a failure in TLS/SSL
            handshake." or "HTTP Error 401: Unauthorized"'

    - name: invalid command
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "invalid"
        certificate_type: "HTTPS"
      register: invalid_command
      ignore_errors: true

    - name: Verify task status - Negative - invalid command
      ansible.builtin.assert:
        that:
          - invalid_command.failed
          - not invalid_command.changed
          - 'invalid_command.msg == "value of command must be one
            of: generate_csr, export, import, reset, got: invalid"'

    - name: invalid certificate type
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "reset"
        certificate_type: "invalid"
      register: invalid_cert_type
      ignore_errors: true

    - name: Verify task status - Negative - invalid certificate type
      ansible.builtin.assert:
        that:
          - invalid_cert_type.failed
          - not invalid_cert_type.changed
          - 'invalid_cert_type.msg == "value of certificate_type must
            be one of: HTTPS, CA, CUSTOMCERTIFICATE, CSC,
            CLIENT_TRUST_CERTIFICATE, got: invalid"'

    - name: invalid certificate path
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "export"
        certificate_type: "HTTPS"
        certificate_path: "invalid_dir"
      register: invalid_cert_path
      ignore_errors: true

    - name: Verify task status - Negative - invalid certificate path
      ansible.builtin.assert:
        that:
          - invalid_cert_path.failed
          - not invalid_cert_path.changed
          - "'Provided directory path \\'invalid_dir\\' is
            not valid.' == invalid_cert_path.msg"

    - name: invalid passphrase
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "import"
        certificate_type: "CSC"
        certificate_path: "{{ base_path_for_import_certificate }}/{{
          CSC_passphrase_certificate }}"
        passphrase: "invalid"
      register: invalid_passphrase
      ignore_errors: true

    - name: Verify task status - Negative - invalid passphrase
      ansible.builtin.assert:
        that:
          - invalid_passphrase.failed
          - not invalid_passphrase.changed
          - "'HTTP Error 400: Bad Request' == invalid_passphrase.msg"

    - name: invalid certificate parameters to generate signing request
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "generate_csr"
        certificate_type: "HTTPS"
        certificate_path: "/root/"
        cert_params:
          invalid_args: "invalid"
      register: invalid_cert_params
      ignore_errors: true

    - name: Verify task status - Negative - invalid certificate parameters
        to generate signing request
      ansible.builtin.assert:
        that:
          - invalid_cert_params.failed
          - not invalid_cert_params.changed
          - "'missing required arguments: common_name, country_code,
            locality_name, organization_name, organization_unit, state_name
            found in cert_params' == invalid_cert_params.msg"

    - name: invalid resource id
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "reset"
        certificate_type: "HTTPS"
        resource_id: invalid
      register: invalid_res
      ignore_errors: true

    - name: Verify task status - Negative - invalid resource id
      ansible.builtin.assert:
        that:
          - invalid_res.failed
          - not invalid_res.changed
          - 'invalid_res.msg == "HTTP Error 404: Not Found"'

    - name: invalid reset value
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "reset"
        certificate_type: "HTTPS"
        reset: invalid
      register: invalid_reset
      ignore_errors: true

    - name: Verify task status - Negative - invalid reset value
      ansible.builtin.assert:
        that:
          - invalid_reset.failed
          - not invalid_reset.changed
          - "'argument \\'reset\\' is of type <class \\'str\\'> and we
            were unable to convert to bool: The value \\'invalid\\' is
            not a valid boolean.  Valid booleans
            include:' in invalid_reset.msg"

    - name: invalid wait value
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "reset"
        certificate_type: "HTTPS"
        wait: invalid
      register: invalid_wait
      ignore_errors: true

    - name: Verify task status - Negative - invalid wait value
      ansible.builtin.assert:
        that:
          - invalid_wait.failed
          - not invalid_wait.changed
          - "'argument \\'wait\\' is of type <class \\'str\\'> and we
            were unable to convert to int: <class \\'str\\'> cannot be
            converted to an int' in invalid_wait.msg"

    - name: invalid custom certificate passphrase
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "import"
        certificate_type: "CUSTOMCERTIFICATE"
        certificate_path: "{{ base_path_for_import_certificate }}/{{
          custom_certificate }}"
        passphrase: "invalid"
      register: invalid_custom_cert_pass
      ignore_errors: true

    - name: Verify task status - Negative - invalid custom certificate
        passphrase
      ansible.builtin.assert:
        that:
          - invalid_custom_cert_pass.failed
          - not invalid_custom_cert_pass.changed
          - "'HTTP Error 400: Bad Request' == invalid_custom_cert_pass.msg"

    - name: invalid custom certificate passphrase for a valid custom
        certificate
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "import"
        certificate_type: "CUSTOMCERTIFICATE"
        certificate_path: "{{ base_path_for_import_certificate }}/{{
          custom_certificate_without_passphrase }}"
        passphrase: "invalid"
      register: invalid_custom_cert_without_pass
      ignore_errors: true

    - name: Verify task status - Negative - invalid custom certificate
        passphrase for a valid custom certificate
      ansible.builtin.assert:
        that:
          - invalid_custom_cert_without_pass.failed
          - not invalid_custom_cert_without_pass.changed
          - "'HTTP Error 400: Bad
            Request' == invalid_custom_cert_without_pass.msg"

    - name: invalid ssl key
      dellemc.openmanage.idrac_certificates:
        validate_certs: false
        command: "import"
        certificate_type: "HTTPS"
        certificate_path: "{{ base_path_for_import_certificate }}/cert.pem"
        ssl_key: "invalid"
      register: invalid_ssl_key
      ignore_errors: true

    - name: Verify task status - Negative - invalid ssl key
      ansible.builtin.assert:
        that:
          - invalid_ssl_key.failed
          - not invalid_ssl_key.changed
          - "'Unable to locate the SSL key file at
            invalid.' == invalid_ssl_key.msg"

  always:
    - name: Delete the directory
      file:
        path: "{{ base_path_for_import_certificate }}"
        state: absent

  module_defaults:
    dellemc.openmanage.idrac_certificates:
      idrac_ip: "{{ idrac_ip }}"
      idrac_user: "{{ idrac_user }}"
      idrac_password: "{{ idrac_password }}"
      validate_certs: "{{ validate_certs }}"
